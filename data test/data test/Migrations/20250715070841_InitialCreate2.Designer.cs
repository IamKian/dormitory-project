// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace data_test.Migrations
{
    [DbContext(typeof(DormitoryContext))]
    [Migration("20250715070841_InitialCreate2")]
    partial class InitialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Block", b =>
                {
                    b.Property<int>("BlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DormitoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BlockId");

                    b.HasIndex("DormitoryId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Dormitory", b =>
                {
                    b.Property<int>("DormitoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DormitoryId");

                    b.ToTable("Dormitories");
                });

            modelBuilder.Entity("Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("PersonType").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoomId");

                    b.HasIndex("BlockId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Tool", b =>
                {
                    b.Property<int>("ToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ToolId");

                    b.HasIndex("RoomId");

                    b.HasIndex("StudentId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasBaseType("Person");

                    b.Property<int>("DormitoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("DormitoryId");

                    b.HasIndex("RoomId");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Supervisor", b =>
                {
                    b.HasBaseType("Person");

                    b.Property<int?>("BlockId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DormitoryId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("BlockId");

                    b.HasIndex("DormitoryId");

                    b.ToTable("Person", t =>
                        {
                            t.Property("DormitoryId")
                                .HasColumnName("Supervisor_DormitoryId");
                        });

                    b.HasDiscriminator().HasValue("Supervisor");
                });

            modelBuilder.Entity("Block", b =>
                {
                    b.HasOne("Dormitory", "Dormitory")
                        .WithMany("Blocks")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dormitory");
                });

            modelBuilder.Entity("Room", b =>
                {
                    b.HasOne("Block", "Block")
                        .WithMany("Rooms")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Tool", b =>
                {
                    b.HasOne("Room", "Room")
                        .WithMany("Tools")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Room");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasOne("Dormitory", "Dormitory")
                        .WithMany()
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Room", "Room")
                        .WithMany("Students")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dormitory");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Supervisor", b =>
                {
                    b.HasOne("Block", "Block")
                        .WithMany("Supervisors")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Dormitory", "Dormitory")
                        .WithMany("Supervisors")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Block");

                    b.Navigation("Dormitory");
                });

            modelBuilder.Entity("Block", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("Supervisors");
                });

            modelBuilder.Entity("Dormitory", b =>
                {
                    b.Navigation("Blocks");

                    b.Navigation("Supervisors");
                });

            modelBuilder.Entity("Room", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
